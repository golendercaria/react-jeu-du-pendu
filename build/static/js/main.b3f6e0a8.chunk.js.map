{"version":3,"sources":["Keyboard.js","CurrentWord.js","Heart.js","App.js","serviceWorker.js","index.js"],"names":["Keyboard","_this","this","window","addEventListener","e","props","alphabet","indexOf","key","action","_this2","react_default","a","createElement","id","map","letter","onClick","className","usedLetter","Component","CurrentWord","_ref","currentWord","win","split","status","Heart","attempt","maxAttempt","hearts","i","push","attemptToHeart","value","App","state","wordCollection","toLowerCase","clickLetter","concat","Object","toConsumableArray","length","setState","pickNewWord","randomIndex","Math","floor","random","launchNewGame","keyCode","_this3","src_Heart","src_CurrentWord","src_Keyboard","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3f6e0a8.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\n\nclass Keyboard extends Component{\n\n\tcomponentDidMount() { \n\t\twindow.addEventListener(\"keyup\", (e) => {\n\t\t\tif (this.props.alphabet.indexOf(e.key) !== -1) { \n\t\t\t\tthis.props.action(e.key)\n\t\t\t}\n\t\t})\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div id=\"keyboard\">\n\t\t\t\t{\n\t\t\t\t\tthis.props.alphabet.map(\n\t\t\t\t\t\t(letter, key) => {\n\t\t\t\t\t\t\treturn <button\n\t\t\t\t\t\t\t\tkey={\"keyboard_\" + key}\n\t\t\t\t\t\t\t\tonClick={() => this.props.action(letter)}\n\t\t\t\t\t\t\t\tclassName={ this.props.usedLetter.indexOf(letter) !== -1 ? \"used\" : \"\"}\n\t\t\t\t\t\t\t>{letter}</button>\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Keyboard","import React from 'react'\nimport './App.css'\n\nconst CurrentWord = ({ currentWord, usedLetter, win }) => {\n\n\treturn (\n\t\t<div id=\"wrapper_new_word\">\n\t\t\t{\n\t\t\t\tcurrentWord.split('').map(\n\t\t\t\t\t(letter, key) => {\n\n\t\t\t\t\t\tlet status = \"finded\"\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (usedLetter.indexOf(letter) === -1) { \n\t\t\t\t\t\t\tif (win === -1) {\n\t\t\t\t\t\t\t\tstatus = \"lost\"\n\t\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\t\tstatus = \"notfinded\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn <span key={\"letter_\" + key} className={status}>\n\t\t\t\t\t\t\t{status === \"finded\" ? letter :\n\t\t\t\t\t\t\t\t(win === -1 ? letter : \"?\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default CurrentWord","import React from 'react'\nimport './App.css'\n\n\nconst Heart = ({ attempt, maxAttempt }) => {\n\treturn (\n\t\t<div id=\"life\">\n\t\t\t{\n\t\t\t\tattemptToHeart(attempt, maxAttempt).map(\n\t\t\t\t\t(value, key) => { \n\t\t\t\t\t\treturn <span\n\t\t\t\t\t\t\tkey={\"heart_\" + key}\n\t\t\t\t\t\t\tclassName={\"heart \"+ (value === 1 ? \"full\" : \"empty\") }></span>\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nfunction attemptToHeart(attempt, maxAttempt) { \n\tlet hearts = []\n\tfor (let i = 1; i <= maxAttempt; i++) { \n\t\tif (i <= attempt) {\n\t\t\thearts.push(0)\n\t\t} else { \n\t\t\thearts.push(1)\n\t\t}\n\t}\n\treturn hearts\n}\n\nexport default Heart","import React, { Component } from 'react'\nimport './App.css'\nimport Keyboard from './Keyboard'\nimport CurrentWord from './CurrentWord'\nimport Heart from './Heart'\n\nclass App extends Component {\n\n\tstate = {\n\t\twordCollection: [\"programmation\",\"wordpress\", \"gare\", \"train\", \"glace\", \"code\", \"licorne\"],\n\t\tcurrentWord: null,\n\t\talphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toLowerCase().split(''),\n\t\tusedLetter: [],\n\t\twin: 0, // 0 : neutral | -1 lost | 1 win\n\t\tattempt: 0,\n\t\tmaxAttempt: 9\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener(\"keyup\", (e) => {\n\t\t\tif (e.keyCode === 13) { \n\t\t\t\tthis.launchNewGame()\n\t\t\t}\n\t\t})\n\t}\n\n\tclickLetter = (letter) => {\n\n\t\tif (this.state.usedLetter.indexOf(letter) === -1) {\n\t\t\t//populate user letter (for prevent multiple click on same letter)\n\t\t\tconst usedLetter = [letter, ...this.state.usedLetter]\n\t\t\t\n\t\t\t//calcul attempt\n\t\t\tlet attempt = this.state.attempt\n\t\t\tif (this.state.currentWord.indexOf(letter) === -1) {\n\t\t\t\tattempt = this.state.attempt + 1\n\t\t\t}\n\n\t\t\t//calcul win state\n\t\t\tlet win = 1\n\t\t\tfor (let i = 0; i < this.state.currentWord.length; i++) { \n\t\t\t\tif (usedLetter.indexOf(this.state.currentWord[i]) === -1) { \n\t\t\t\t\twin = 0\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//calcul lost state \n\t\t\tif (attempt >= this.state.maxAttempt && win === 0) { \n\t\t\t\twin = -1\n\t\t\t}\n\n\t\t\t//update state\n\t\t\tthis.setState({ usedLetter, attempt, win })\n\t\t}\n\n\t}\n\n\tpickNewWord = () => { \n\n\t\tconst randomIndex = Math.floor(Math.random() * this.state.wordCollection.length)\n\t\treturn this.state.wordCollection[randomIndex]\n\t\t\n\t}\n\n\tlaunchNewGame = () => { \n\n\t\tthis.setState({\n\t\t\tcurrentWord: this.pickNewWord(),\n\t\t\tusedLetter: [],\n\t\t\twin: 0,\n\t\t\tattempt: 0\n\t\t})\n\t\t\n\t}\n\n\trender() { \n\t\treturn (\n\t\t\t<div id=\"game\">\n\t\t\t\t<h1>Jeu du pendu</h1>\n\n\t\t\t\t{\n\t\t\t\t\t//DRAW COMPONENT\n\t\t\t\t\t(this.state.currentWord !== null) &&\n\t\t\t\t\t\t<Heart\n\t\t\t\t\t\t\tattempt={this.state.attempt}\n\t\t\t\t\t\t\tmaxAttempt={this.state.maxAttempt}\n\t\t\t\t\t\t/>\n\t\t\t\t}\n\n\t\t\t\t{\n\t\t\t\t\t//THE WORD TO DISCOVER\n\t\t\t\t\t(this.state.currentWord !== null) &&\n\t\t\t\t\t\t<CurrentWord\n\t\t\t\t\t\t\tcurrentWord={this.state.currentWord}\n\t\t\t\t\t\t\tusedLetter={this.state.usedLetter}\n\t\t\t\t\t\t\twin={this.state.win}\n\t\t\t\t\t\t/>\n\t\t\t\t}\n\n\t\t\t\t{\n\t\t\t\t\t//KEYBOARD COMPONENT\n\t\t\t\t\t(this.state.win === 0 && this.state.currentWord !== null) &&\n\t\t\t\t\t<Keyboard\n\t\t\t\t\t\talphabet={this.state.alphabet}\n\t\t\t\t\t\tusedLetter={this.state.usedLetter}\n\t\t\t\t\t\taction={this.clickLetter}\n\t\t\t\t\t/>\n\t\t\t\t}\n\n\t\t\t\t{\n\t\t\t\t\t//WIN MESSAGE\n\t\t\t\t\tthis.state.win === 1 && \n\t\t\t\t\t\t<p id=\"win_message\">WIN !!!</p>\n\t\t\t\t}\n\n\t\t\t\t{\n\t\t\t\t\t//LOST MESSAGE\n\t\t\t\t\tthis.state.win === -1 && \n\t\t\t\t\t\t<p id=\"lost_message\">LOST !!!</p>\n\t\t\t\t}\n\n\t\t\t\t{\n\t\t\t\t\t//RESTART BUTTON\n\t\t\t\t\t(this.state.currentWord === null || this.state.win !== 0) &&\n\t\t\t\t\t\t<button id=\"play_new_game\" onClick={() => this.launchNewGame()}>Nouvelle partie</button>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}